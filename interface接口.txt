
interface接口: 
	像是一种强制要求一样，强制要求继承此接口的类，要必须实现相关的成员(属性字段)，接口内的成员只做声明，不具体实现
	只要继承此接口的类的可见域里有这个成员就可以了，就算是从基类继承而来的也没事	
	1.隐式实现：必须用public修饰,就像使用正常的类方法一样,可以添加virtual/abstrace修饰,就是不能用static来修饰
		public void Hehe() {}
	2.显示实现: 调用的时候需要转换成接口类型才可以
		void IBase.Hehe() {}
		public void Hehe() {} //和成员方法IBase.Hehe()看上去容易误认为是函数重载，但实际调用的方式不同,而且函数重载依据的参数类型和个数和ref/out
	
	3.我这里发现一个有趣的现象: 基类和派生类同时继承接口，无论是显示现实接口还是隐式实现接口，用显示实现接口的方式去调用会有多态性的效果
		    public interface IBase //IBase必须在
    			{
        			void Hehe();
    			}	
		
		    public class Fathor: IBase //IBase必须在
    			{
        			public void Hehe(){}
    			}	
	            public class Child: Fathor, IBase	
    			{
        			public void Hehe(){}
    			}


                    Fathor child = new Child();
                    ((IBase)child).Hehe(); //调用到的是Child.Hehe(),多态性的效果