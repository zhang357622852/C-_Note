
1.virtual修饰符:方法,属性...不修饰字段
	在基类中修饰方法/属性等,在派生类中不强求覆盖(override)重写,如果需要覆盖重写的话需要用override修饰，如果没有用override修饰的话属于同名隐藏,可以使用new来修饰。

2.abstract修饰符:抽象
	修饰类：1.不可以实例化, 2,不能使用sealed修饰, 3.继承抽象类的非抽象类必须实现抽象成员(方法,属性,索引器,事件)
	修饰方法: 1.带有虚函数的属性,实现多态,必须在非抽象派生类中实现,抽象派生类可以不实现 2.抽象方法的类必须是抽象类 3.抽象方法只是声明，以分号结束，不实现方法体

3.public,protected,private : protected的作用是能够被派生类继承并且不被外部所使用

4.override修饰符:覆盖重写，实现面向对象的多态性

5.static修饰符:静态,
	修饰类:静态类中的所有成员都要是静态的，如果不是静态的说明就是实例对象的成员，就与静态类矛盾了
	修饰字段/属性: 所有对象实例公用一个静态成员

6.ref/out修饰参数: 传地址的参数
	ref: "可进可出": 变量必须在ref修饰前初始化,进入函数时可改变值也可以不改变值
	out: "只出不进": 变量无需在out修饰前初始化，进入函数后会清空此变量，所有进入函数后必须初始化。

7.new修饰符: 不是创建对象实例的那个new
	派生类与基类有同名成员时，可以使用new修饰符，说明是隐藏基类的同名成员

8.sealed修饰符: 密封
	修饰类: 无法被继承,有一些类，例如单例类就无需被继承就可以使用这个修饰符

9.interface:接口关键字
	接口的成员只做声明，并且必须在继承此接口的类中实现接口成员

10.operator运算符重载
	和c++的运算符重载有些不一样:c++中会默认带入代用此函数的实例
	而c#中operator运算符重载函数必须声明为public和static，所以就不会像c++那样可以默认带入调用此函数的实例

11. 泛型修饰符:in(逆变) out(协变) 目前只在接口和委托中使用
	逆变(不正常的转换):基类转换为派生类  Child child = (Child)fathor;
	协变(正常转换): 派生类转换为基类 Fathor fathor = child; //隐式转换
	public interface ITest<out T> {}
	public delegate void MyDelegate<in T>(T param);
	
	