     
1. 首先要说明的是, delegate 被编译器 编译成一个class, 所以才能传来传去(具体参考 《CLR via C#》第四版), 所以 Action、Func也是如此

2. 在C#中,原来闭包只是编译器玩的花招而已,它仍然没有脱离.NET对象生命周期的规则，它将需要修改作用域的变量直接封装到返回的类中变成类的一个属性,从而保证了变量的生命周期不会随函数调用结束而结束，因为变量n在这里已经成了返回的类的一个属性. 

3.示例:
public class TCloser
{
    public Func<int> T1()
    {
        var n = 999;
        return () =>
        {
            return n;
        };
    }
}

class Program
{
    static void Main()
    {
        var a = new TCloser();
        var b = a.T1();
        Console.WriteLine(b());
    }
}

按理说局部变量n在调用完T1函数时生命已经结束了，然而没有，被返回的匿名函数继续使用。这种机制就是闭包,实质就是闭包的局部变量会提升一个等级成为类的一个属性，而且不能被其他类方法使用，也不能被自身类的其他方法使用， 只能在那个声明定义的函数方法里作用域里使用。